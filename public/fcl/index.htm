<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Calendar - Howdy & Farewell</title>
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
      font-size: 14px;
    }
    #calendar {
      max-width: 1100px;
      margin: 40px auto;
      background: #fff;
      padding: 1rem;
      box-shadow: 0px 2px 10px rgba(0,0,0,0.3);
    }
    .fc-toolbar-title {
      font-size: 1.75rem;
      font-weight: bold;
    }
    .loading {
      text-align: center;
      padding: 20px;
      font-size: 1.2rem;
    }
  </style>
</head>
<body data-state="farewell"> <!-- Change to "howdy" for the other venue -->
  <div id="calendar"></div>
  <div id="credEt"></div>
  
  <script src="/helper/ifrevl.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      const state = document.body.dataset.state;
      const endpoint = state === 'howdy' ? '/hyevent?format=json' : '/fwevent?format=json';
      
      // Show loading state
      document.getElementById('calendar').innerHTML = '<div class="loading">Loading events...</div>';
      
      try {
        const response = await fetch(endpoint);
        if (!response.ok) throw new Error('Failed to fetch events');
        
        const eventsData = await response.json();
        
        // Map to FullCalendar events
        const fcEvents = eventsData.map(ev => ({
          title: ev.title || ev.venue + (ev.ageRestriction ? ` (${ev.ageRestriction})` : ''),
          start: parseCustomDate(ev.date),
          allDay: true,
          extendedProps: {
            venue: ev.venue,
            ageRestriction: ev.ageRestriction
          }
        })).filter(ev => ev.start); // Filter out invalid dates
        
        // Initialize calendar
        var calendar = new FullCalendar.Calendar(document.getElementById('calendar'), {
          initialView: 'listWeek',
          headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,listWeek,listYear'
          },
          views: {
            listWeek: { buttonText: 'Week' },
            listYear: { buttonText: 'Year' },
            dayGridMonth: { buttonText: 'Month' }
          },
          events: fcEvents,
          eventClick: function(info) {
            info.jsEvent.preventDefault();
            alert(`Event: ${info.event.title}\nDate: ${info.event.start.toLocaleDateString()}`);
          }
        });
        
        calendar.render();
        
      } catch (error) {
        document.getElementById('calendar').innerHTML = 
          `<div class="loading" style="color: red;">Error loading events: ${error.message}</div>`;
        console.error('Calendar error:', error);
      }
    });
    
    // Helper to parse various date formats
    function parseCustomDate(dateStr) {
      if (!dateStr) return null;
      
      // Try ISO format first
      let date = new Date(dateStr);
      if (!isNaN(date)) return date;
      
      // Try other formats
      const formats = [
        'MMMM d, yyyy',  // April 8, 2024
        'MMM d, yyyy',   // Apr 8, 2024
        'MMMM d yyyy',   // April 8 2024
        'MM/dd/yyyy'     // 04/08/2024
      ];
      
      for (const format of formats) {
        date = new Date(dateStr);
        if (!isNaN(date)) return date;
      }
      
      console.warn('Could not parse date:', dateStr);
      return null;
    }
  </script>
</body>
</html>